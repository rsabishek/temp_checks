// customhttpclient.go

package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
)

// CustomHTTPClient is a custom HTTP client that sends GET requests with a bearer token.
type CustomHTTPClient struct {
    BaseURL      string
    BearerToken  string
}

// NewCustomHTTPClient creates a new CustomHTTPClient instance.
func NewCustomHTTPClient(baseURL, bearerToken string) *CustomHTTPClient {
    return &CustomHTTPClient{
        BaseURL:     baseURL,
        BearerToken: bearerToken,
    }
}

// Get sends a GET request to the specified path and returns the response body.
func (c *CustomHTTPClient) Get(path string) ([]byte, error) {
    url := c.BaseURL + path

    // Create a new HTTP client
    client := &http.Client{}

    // Create a GET request
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, err
    }

    // Set the Authorization header with the bearer token
    req.Header.Set("Authorization", "Bearer "+c.BearerToken)

    // Send the request
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    // Check if the response status code is not 200 OK
    if resp.StatusCode != http.StatusOK {
        return nil, fmt.Errorf("API request failed with status code: %d", resp.StatusCode)
    }

    // Read the response body
    responseBody, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    return responseBody, nil
}
