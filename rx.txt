
	package your_plugin_name

import (
	"errors"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// APIClientPayload represents the structure of the payload we want to send to the API.
type APIClientPayload struct {
	ClientID      string   `json:"clientId"`
	ClientName    string   `json:"clientName"`
	ClientSecret  string   `json:"clientSecret,omitempty"`
	ClientAuth    string   `json:"clientAuth"`
	RedirectUris  []string `json:"redirectUris"`
	RiskProfile   int      `json:"riskProfile"`
	// ... additional fields for other attributes.
}

// ResourceDataToAPIClientPayload transforms the Terraform resource data to the desired API payload.
func ResourceDataToAPIClientPayload(data tfsdk.ResourceData) (APIClientPayload, error) {
	var payload APIClientPayload

	// Extract the "oauth_client" SingleNestedAttribute from the data.
	oauthClient, _ := data.GetAttribute(context.TODO(), "oauth_client")
	clientData := oauthClient.AsSingle().Elem()

	clientID, _ := clientData.GetAttribute(context.TODO(), "client_id")
	payload.ClientID = clientID.(types.String).Value

	clientName, _ := clientData.GetAttribute(context.TODO(), "client_name")
	payload.ClientName = clientName.(types.String).Value

	clientSecret, _ := clientData.GetAttribute(context.TODO(), "client_secret")
	payload.ClientSecret = clientSecret.(types.String).Value

	clientAuth, _ := clientData.GetAttribute(context.TODO(), "client_auth")
	payload.ClientAuth = clientAuth.(types.String).Value

	redirectUris, _ := clientData.GetAttribute(context.TODO(), "redirect_uris")
	for _, uri := range redirectUris.AsList() {
		payload.RedirectUris = append(payload.RedirectUris, uri.(types.String).Value)
	}

	riskProfile, _ := clientData.GetAttribute(context.TODO(), "risk_profile")
	payload.RiskProfile = int(riskProfile.(types.Number).Value)

	// Add validation for clientAuth.
	if payload.ClientAuth != "NONE" && payload.ClientAuth != "SECRET" {
		return payload, errors.New("clientAuth must be either 'NONE' or 'SECRET'")
	}

	// Add validation for riskProfile.
	if payload.RiskProfile < 1 || payload.RiskProfile > 4 {
		return payload, fmt.Errorf("riskProfile must be between 1 and 4. Received: %d", payload.RiskProfile)
	}

	// ... add transformations and validations for other attributes as needed.

	return payload, nil
}
