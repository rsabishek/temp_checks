// Map from attribute names in our Terraform schema to keys in the API payload
var attributeToPayloadKeyMap = map[string]string{
	"Description":      "description",
	"ClientID":         "clientId",
	"ClientName":       "clientName",
	"RedirectUris":     "redirectUris",
	"RiskProfile":      "riskProfile",
	"ApplicationType":  "applicationType",
	// ... Continue for other top-level fields
}

func ResourceDataToAPIPayload(data oauthClientResourceModel) (map[string]interface{}, error) {
    payload := make(map[string]interface{})

    // Using reflection to iterate over the fields of the resource model
    val := reflect.ValueOf(data)
    typeOfData := val.Type()

    for i := 0; i < val.NumField(); i++ {
        field := val.Field(i)
        fieldName := typeOfData.Field(i).Name

        // If the field name is in our map, use the mapped payload key
        if payloadKey, ok := attributeToPayloadKeyMap[fieldName]; ok {
            switch t := field.Interface().(type) {
            case types.String:
                payload[payloadKey] = t.Value
            case types.List:
                payload[payloadKey] = t.Elements
            case types.Number:
                payload[payloadKey] = t.Value
            // ... Handle other types as needed
            }
        }
    }

    // SingleNestedAttributes
    clientAuth :=
