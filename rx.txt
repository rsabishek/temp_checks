
package onegos

import (
	"context"
	"strings"
	"github.com/hashicorp/terraform-plugin-framework/resource"
)

// Mapping of Terraform attributes to API payload keys
var attributeToPayloadKeyMap = map[string]string{
	"client_id":      "clientId",
	"name":           "name",
	"description":    "description",
	"redirect_uris":  "redirectUris",
	"risk_profile":  "riskProfile",
	"client_auth":   "clientAuth",
	"secret":         "secret",
	"type":           "type",
	"application_type": "applicationType",
	"oidc":           "oidc",
	"mfa":            "mfa",
	"sso":            "sso",
	"acr":            "acr",
	//... add other attributes here
}

// ResourceDataToAPIPayload transforms the Terraform resource data to the API payload.
func ResourceDataToAPIPayload(ctx context.Context, data resource.ResourceData) (map[string]interface{}, error) {
	payload := make(map[string]interface{})

	for attr, payloadKey := range attributeToPayloadKeyMap {
		val, exists := data.Get(ctx, attr)

		if !exists {
			continue
		}

		// Transform Terraform types to appropriate Go types here, if needed.
		// For now, we just assign them as is.
		payload[payloadKey] = val
	}

	// Special handling for nested attributes, e.g., "oidc"
	oidcVal, oidcExists := data.Get(ctx, "oidc")
	if oidcExists {
		oidcMap := oidcVal.(map[string]types.Object)
		oidcPayload := make(map[string]interface{})
		for attr, payloadKey := range attributeToPayloadKeyMap {
			if value, exists := oidcMap[attr]; exists {
				oidcPayload[payloadKey] = value
			}
		}
		payload["oidc"] = oidcPayload
	}

	//... Similar transformations for other nested attributes

	return payload, nil
}
