Of course, let's detail the approach further for your `resource_oauth_client.go` `Create` function, assuming you have a `resourceDataToAPIMap` function that transforms Terraform schema data to your API's payload structure.

```go
package main

// ... Your other imports ...
import (
	"encoding/json"
	// ... other imports ...
)

// OauthClientResource struct definition
type OauthClientResource struct {
	client *api.Client
}

// resourceDataToAPIMap takes the Terraform resource data and returns the desired camelCase API payload
func resourceDataToAPIMap(data *tfsdk.ResourceData) map[string]interface{} {
	return map[string]interface{}{
		"name":         data.Get("name").(string),
		"description":  data.Get("description").(string),
		"clientAuth":   data.Get("client_auth").(string),
		"redirectUris": data.Get("redirect_uris").([]string),
		// ... other fields...
	}
}

// Create function for OauthClientResource
func (r *OauthClientResource) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {

	// Transform Terraform data to your API's payload structure
	payload := resourceDataToAPIMap(req.ResourceData)

	// Convert the payload to JSON or your desired format for the API call
	jsonData, err := json.Marshal(payload)
	if err != nil {
		// Handle error, set the response diagnostics, and return
		resp.Diagnostics.AddError("Error Marshalling Payload", err.Error())
		return
	}

	// Use jsonData in your API call
	result, apiErr := r.client.CreateOAuthClient(jsonData)
	if apiErr != nil {
		// Handle API error, set the response diagnostics, and return
		resp.Diagnostics.AddError("API Error", apiErr.Error())
		return
	}

	// Assuming 'result' contains the ID of the created resource, set the ID for Terraform state
	resp.Id = result.Id
	
	// Set any other required attributes to the Terraform state
	// ...
}

// ... Rest of your code ...

```

The function `resourceDataToAPIMap` does the transformation of your Terraform schema data to your API's expected payload structure. You then marshal this to JSON (or whatever format your API expects) and make the API call. The response from the API call, particularly the ID of the created resource, is then set to the Terraform state using `resp.Id`. Adjustments might be needed based on the specifics of your API and its response structure.