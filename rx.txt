
Certainly! Using the JSON you provided earlier, here's the schema definition for the `oauth_client` resource inside the `resource_oauth_client.go` file:

```go
package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/schema"
)

type OauthClientResource struct {
	client *api.Client
}

func (r OauthClientResource) Schema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		Attributes: map[string]tfsdk.Attribute{
			"did": schema.NumberAttribute{
				Type:     types.NumberType,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Type:     types.StringType,
				Required: true,
			},
			"description": schema.StringAttribute{
				Type:     types.StringType,
				Required: true,
			},
			"redirect_uris": schema.ListAttribute{
				ElemType: schema.StringAttribute{
					Type: types.StringType,
				},
				Required: true,
			},
			"risk_profile": schema.NumberAttribute{
				Type:     types.NumberType,
				Required: true,
			},
			"client_auth": schema.ObjectAttribute{
				Attributes: map[string]tfsdk.Attribute{
					"type": schema.StringAttribute{
						Type:     types.StringType,
						Required: true,
					},
					"secret": schema.StringAttribute{
						Type:     types.StringType,
						Optional: true,  // If it's not always required
					},
				},
			},
			"application_type": schema.StringAttribute{
				Type:     types.StringType,
				Required: true,
			},
			"oidc": schema.ObjectAttribute{
				Attributes: map[string]tfsdk.Attribute{
					"realm": schema.StringAttribute{
						Type:     types.StringType,
						Required: true,
					},
					"mfa": schema.ObjectAttribute{
						Attributes: map[string]tfsdk.Attribute{
							"mfa_required": schema.BoolAttribute{
								Type:     types.BoolType,
								Required: true,
							},
							// ... continue with other attributes like mfaProviders if needed ...
						},
					},
				},
			},
			// ... similar pattern for `sso`, `acr`, and other fields...
		},
	}, nil
}

// ... the rest of the resource implementation ...
```

Do note that this is a simplified version, and depending on the actual behavior and requirements of each attribute (like if they're optional, have default values, etc.), you might need to modify the schema accordingly.
`
The corresponding Terraform resource schema will look like:

```go
func (r oauthClientResource) Schema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
    return tfsdk.Schema{
        Attributes: map[string]tfsdk.Attribute{
            "did": {
                Type:     types.NumberType,
                Optional: true,
                Computed: true,
            },
            "name": {
                Type:     types.StringType,
                Required: true,
            },
            "description": {
                Type:     types.StringType,
                Required: true,
            },
            "redirectUris": {
                Type:     types.ListType{ElemType: types.StringType},
                Required: true,
            },
            "riskProfile": {
                Type:     types.NumberType,
                Required: true,
            },
            "clientAuth": {
                Type:     types.ObjectType{
                    Attributes: map[string]tfsdk.Attribute{
                        "type": {
                            Type:     types.StringType,
                            Required: true,
                        },
                        "secret": {
                            Type:     types.StringType,
                            Required: true,
                            Sensitive: true,
                        },
                    },
                },
                Required: true,
            },
            "applicationType": {
                Type:     types.StringType,
                Required: true,
            },
            "oidc": {
                Type:     types.ObjectType{
                    Attributes: map[string]tfsdk.Attribute{
                        "realm": {
                            Type:     types.StringType,
                            Required: true,
                        },
                        "mfa": {
                            Type:     types.ObjectType{
                                Attributes: map[string]tfsdk.Attribute{
                                    "mfaRequired": {
                                        Type:     types.BoolType,
                                        Required: true,
                                    },
                                    "mfaProviders": {
                                        // ...define further nested attributes here...
                                    },
                                },
                            },
                            Required: true,
                        },
                    },
                },
                Required: true,
            },
            "sso": {
                Type:     types.ObjectType{
                    Attributes: map[string]tfsdk.Attribute{
                        "ssoEnabled": {
                            Type:     types.BoolType,
                            Required: true,
                        },
                    },
                },
                Required: true,
            },
            "acr": {
                Type:     types.ObjectType{
                    Attributes: map[string]tfsdk.Attribute{
                        "acrEnabled": {
                            Type:     types.BoolType,
                            Required: true,
                        },
                    },
                },
                Required: true,
            },
        },
    }, nil
}
```

This is a starting point, and you might need to adjust based on the exact requirements and constraints of your application.

Remember, the `Required` fields are those which must be specified by the user in their Terraform configuration. The `Optional` fields are those which they can provide, but if they don't, the default will be used or it might be computed during the resource lifecycle. The `Computed` fields are those which are computed during the resource's lifecycle and not specified by the user. You can adjust these based on the needs of your application and how you expect the user to interact with the resource.
